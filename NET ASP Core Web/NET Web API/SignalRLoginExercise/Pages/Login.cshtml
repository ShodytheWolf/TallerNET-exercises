@page "/"
@model SignalRLoginExercise.Pages.LoginModel
@{
    Layout = null;
}
<!DOCTYPE html>
<!--Este código fue robado del siguiente link de v0 https://v0.dev/chat/ONuNut7rMIi-->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <title>Login Form</title>
    <style>
        body {
            font-family: "Comic Sans MS", "Comic Sans", cursive;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #00ff00, #00ffff);
            overflow: hidden;
            position: relative;
        }
        body::before {
            content: "el disenio grafiko es mi pacion";
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 24px;
            color: rgba(255, 255, 255, 0.8);
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            z-index: -1;
        }
        .login-container {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 300px;
        }
        h2 {
            text-align: center;
            color: #333;
        }
        .input-group {
            margin-bottom: 1rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #666;
        }
        input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            font-family: inherit;
        }
        button {
            width: 100%;
            padding: 0.75rem;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-family: inherit;
        }
        button:hover {
            background-color: #0056b3;
        }
        .error {
            color: red;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
            <div class="input-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
                <div id="emailError" class="error"></div>
            </div>
            <div class="input-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" required>
                <div id="passwordError" class="error"></div>
            </div>
            <button type="submit">Login</button>
        </form>
    </div>

    <script>

        //Comienza la conexión con el Hub: UserHub
        var connection = new signalR.HubConnectionBuilder().withUrl("/login").build();
        connection.start().then(function () {

            console.log("Se estableció la conexión con SignalR de forma exitosa");

        }).catch(function (err) {

            return console.error(err.toString());
        });

        //Una vez autenticado el usuario:
        connection.on("AuthenticationComplete", function () {

            sessionStorage.setItem('userEmail', document.getElementById('email').value);

            console.log("me autentiqué");
            window.location.href = "https://localhost:7777/Welcome";

        });


        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            let isValid = true;

            // Reset error messages
            document.getElementById('emailError').textContent = '';
            document.getElementById('passwordError').textContent = '';

            // Validate email
            if (!email || !/\S+@@\S+\.\S+/.test(email)) {
                document.getElementById('emailError').textContent = 'Please enter a valid email address.';
                isValid = false;
            }

            // Validate password
            if (!password || password.length < 6) {
                document.getElementById('passwordError').textContent = 'Password must be at least 6 characters long.';
                isValid = false;
            }

            if (isValid) {

                alert('Login submitted successfully! Please authenticate now!');
                let hashedPassword = stringToHash(password);

                connection.invoke("LogUser", email, password).catch(function (err) {
                    return console.error(err.toString());
                });
            }
        });

        //agarré esta implementación de hash de la siguiente página
        //https://www.geeksforgeeks.org/how-to-create-hash-from-string-in-javascript/
        function stringToHash(string) {
            let hash = 0;

            if (string.length === 0) return hash;

            for (const char of string) {
                hash ^= char.charCodeAt(0); // Bitwise XOR operation
            }

            return hash;
        }
    </script>
</body>
</html>